import { test, expect } from '@playwright/test';
import { PlaywrightMCPClient } from '../mcp-integration/mcpClient';

test.describe('Playwright MCP - Pruebas B√°sicas', () => {
    let mcpClient: PlaywrightMCPClient;

    test.beforeEach(async () => {
        mcpClient = new PlaywrightMCPClient();
        await mcpClient.connect();
    });

    test.afterEach(async () => {
        if (mcpClient) {
            await mcpClient.disconnect();
        }
    });

    test('MCP-001: Verificar conexi√≥n y listar herramientas disponibles', async () => {
        console.log('üß™ Iniciando test de conexi√≥n MCP...');
        
        // Listar herramientas disponibles
        const tools = await mcpClient.listTools();
        console.log('üõ†Ô∏è Herramientas disponibles:', tools.map(t => t.name));
        
        // Verificar que tenemos las herramientas b√°sicas
        const toolNames = tools.map(t => t.name);
        expect(toolNames).toContain('playwright_navigate');
        expect(toolNames).toContain('playwright_click');
        expect(toolNames).toContain('playwright_fill');
        
        console.log('‚úÖ Conexi√≥n MCP verificada correctamente');
    });

    test('MCP-002: Navegaci√≥n b√°sica usando MCP', async () => {
        console.log('üß™ Iniciando test de navegaci√≥n MCP...');
        
        // Navegar usando MCP
        const navResult = await mcpClient.navigate('https://ecommerce-playground.lambdatest.io/');
        console.log('üåê Resultado de navegaci√≥n:', navResult);
        
        // Tomar screenshot para verificar
        const screenshotResult = await mcpClient.screenshot('./test-results/mcp-navigation.png');
        console.log('üì∏ Screenshot tomado:', screenshotResult);
        
        console.log('‚úÖ Navegaci√≥n MCP completada');
    });

    test('MCP-003: Interacci√≥n con formularios usando MCP', async () => {
        console.log('üß™ Iniciando test de formularios MCP...');
        
        // Navegar a p√°gina de login
        await mcpClient.navigate('https://ecommerce-playground.lambdatest.io/index.php?route=account/login');
        
        // Llenar formulario usando MCP
        await mcpClient.fill('#input-email', 'test@example.com');
        await mcpClient.fill('#input-password', 'password123');
        
        // Obtener texto de un elemento
        const emailValue = await mcpClient.getText('#input-email');
        console.log('üìß Valor del email:', emailValue);
        
        // Tomar screenshot del formulario lleno
        await mcpClient.screenshot('./test-results/mcp-form-filled.png');
        
        console.log('‚úÖ Interacci√≥n con formularios MCP completada');
    });

    test('MCP-004: Manejo de errores y recuperaci√≥n', async () => {
        console.log('üß™ Iniciando test de manejo de errores MCP...');
        
        try {
            // Intentar hacer click en un elemento que no existe
            await mcpClient.click('#elemento-inexistente');
        } catch (error) {
            console.log('‚ö†Ô∏è Error esperado capturado:', error.message);
            expect(error).toBeDefined();
        }
        
        // Verificar que el cliente sigue funcionando despu√©s del error
        const tools = await mcpClient.listTools();
        expect(tools.length).toBeGreaterThan(0);
        
        console.log('‚úÖ Manejo de errores MCP verificado');
    });
});